{'summarized_nodes': [{'title': 'Rc(i)', 'summary': 'A variable representing a certain outcome in the context of the study, related to prediction accuracy and approximated to a specific value based on free energies. It is also defined in terms of a summation involving coefficients C2 and a parameter ∆.', 'original_ids': ['Rc(i)', 'Rc(i)', 'Rc(i)', 'Rc(i)', 'Rc(i)'], 'type': 'Variable', 'keywords': ['prediction', 'accuracy', 'free energies', 'decay constant']}, {'title': 'σ', 'summary': 'A variable that is part of the proportionality factor in the expression for Rc(i), depending on the value of ρ.', 'original_ids': ['σ', 'σ'], 'type': 'Variable', 'keywords': ['proportionality', 'factor']}, {'title': 'ρ', 'summary': 'A variable that influences the proportionality factor in the expression for Rc(i) and is defined as the ratio of the delay over the average time spent on a Sbase.', 'original_ids': ['ρ', 'ρ'], 'type': 'Variable', 'keywords': ['proportionality', 'delay', 'average time']}, {'title': 'Ta', 'summary': 'An apparent signal for which sequence prediction is to be made, with a probability associated with the time ta that is highly non-local.', 'original_ids': ['Ta', 'Ta'], 'type': 'Signal', 'keywords': ['signal', 'sequence prediction', 'probability']}, {'title': 'P', 'summary': 'The probability associated with the signal Ta and the time ta, which is defined based on the relationship with the sequence B.', 'original_ids': ['P', 'P'], 'type': 'Probability', 'keywords': ['probability', 'signal', 'sequence']}, {'title': 'bp i', 'summary': 'A specific location in the context of time-traces, related to the delay between two measures and the time spent by the fork on this base pair.', 'original_ids': ['bp i', 'bp i'], 'type': 'Location', 'keywords': ['location', 'time-traces']}, {'title': 'Wbase', 'summary': 'A unique base located at position i in the sequence, part of a repeated sequence with a single Sbase.', 'original_ids': ['Wbase', 'Wbase'], 'type': 'Base', 'keywords': ['base', 'sequence']}, {'title': 'Sbase', 'summary': 'A repeated sequence of bases with a unique Wbase at a specific location.', 'original_ids': ['Sbase', 'Sbase'], 'type': 'Base', 'keywords': ['repeated sequence', 'base']}, {'title': 'sequence B', 'summary': 'A sequence of real times used to calculate probabilities of apparent times, influencing the probability of predicting sequence B given the true sequence BL.', 'original_ids': ['sequence B', 'sequence B'], 'type': 'Sequence', 'keywords': ['sequence', 'probability']}, {'title': 'BL', 'summary': 'The true sequence used for prediction, which is involved in the calculation of the probability Qa(B).', 'original_ids': ['BL', 'BL'], 'type': 'Sequence', 'keywords': ['true sequence', 'prediction']}, {'title': 'Qa(B)', 'summary': 'The probability of predicting sequence B, calculated using the integral of Pa(Ta|BL).', 'original_ids': ['Qa(B)', 'Qa(B)'], 'type': 'Probability Function', 'keywords': ['probability', 'prediction']}, {'title': 'thermal noise', 'summary': 'Random fluctuations in a system that can affect measurements and signals, influencing the quality of unzipping signals.', 'original_ids': ['thermal noise', 'thermal noise'], 'type': 'Physical Phenomenon', 'keywords': ['fluctuations', 'measurements']}, {'title': 'deconvolution', 'summary': 'A process used to reverse the effects of convolution on recorded signals, utilizing a kernel to correct signal inference.', 'original_ids': ['deconvolution', 'deconvolution'], 'type': 'Mathematical Process', 'keywords': ['process', 'correction']}, {'title': 'Viterbi algorithm', 'summary': 'An algorithm used for decoding sequences, particularly in the context of hidden Markov models, to infer the DNA sequence from signals.', 'original_ids': ['Viterbi algorithm', 'Viterbi algorithm'], 'type': 'Algorithm', 'keywords': ['decoding', 'sequences']}, {'title': 'Prediction Error', 'summary': 'The error evaluated through the comparison between the true and the predicted sequences, which decreases exponentially with the number of unzippings.', 'original_ids': ['Prediction Error', 'Prediction Error'], 'type': 'Metric', 'keywords': ['error', 'comparison']}], 'summarized_relationships': [{'source': 'Rc(i)', 'target': 'σ', 'relation_type': 'PROPORTIONAL_TO', 'weight': 1, 'original_relationships': ['Rc(i)->σ(Proportional to)']}, {'source': 'σ', 'target': 'ρ', 'relation_type': 'DEPENDS_ON', 'weight': 1, 'original_relationships': ['σ->ρ(Depends on)']}, {'source': 'ρ', 'target': 'delay ∆ t', 'relation_type': 'RELATED_TO', 'weight': 1, 'original_relationships': ['ρ->δx/x0(Related to)']}, {'source': 'Ta', 'target': 'P', 'relation_type': 'ASSOCIATED_WITH', 'weight': 1, 'original_relationships': ['Ta->P(Probability of)']}, {'source': 'P', 'target': 'sequence B', 'relation_type': 'INFLUENCES', 'weight': 1, 'original_relationships': ['P->sequence B(Used to calculate)']}, {'source': 'bp i', 'target': 'delay ∆ t', 'relation_type': 'MEASURED_IN_RELATION_TO', 'weight': 1, 'original_relationships': ['bp i->delay ∆ t(Measured in relation to)']}, {'source': 'Wbase', 'target': 'Sbase', 'relation_type': 'PART_OF', 'weight': 1, 'original_relationships': ['Wbase->Sbase(Contains)']}, {'source': 'sequence B', 'target': 'BL', 'relation_type': 'USED_IN', 'weight': 1, 'original_relationships': ['sequence B->BL(Used for prediction)']}, {'source': 'BL', 'target': 'Qa(B)', 'relation_type': 'INFLUENCES', 'weight': 1, 'original_relationships': ['BL->Qa(B(Used in calculation)']}, {'source': 'thermal noise', 'target': 'unzipping signals', 'relation_type': 'AFFECTS', 'weight': 1, 'original_relationships': ['thermal noise->unzipping signals(Affects)']}, {'source': 'deconvolution', 'target': 'kernel', 'relation_type': 'UTILIZES', 'weight': 1, 'original_relationships': ['deconvolution->kernel(Utilizes)']}, {'source': 'Viterbi algorithm', 'target': 'DNA sequence', 'relation_type': 'USED_TO_INFER', 'weight': 1, 'original_relationships': ['Viterbi algorithm->DNA sequence(Used to infer)']}, {'source': 'Prediction Error', 'target': 'True Sequence', 'relation_type': 'COMPARED_TO', 'weight': 1, 'original_relationships': ['Prediction Error->True Sequence(Compared to)']}]}